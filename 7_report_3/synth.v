/* Generated by Yosys 0.29 (git sha1 9c5a60eb201, clang 14.0.3 -fPIC -Os) */

(* top =  1  *)
(* src = "fifo.sv:1.1-47.10" *)
module fifo(in, we, full, out, re, empty, clk, rst);
  wire [7:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  (* force_downto = 32'd1 *)
  (* src = "fifo.sv:20.19-20.27|/opt/homebrew/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [2:0] _107_;
  (* force_downto = 32'd1 *)
  (* src = "fifo.sv:20.19-20.27|/opt/homebrew/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [2:0] _108_;
  (* src = "fifo.sv:8.8-8.11" *)
  input clk;
  wire clk;
  (* src = "fifo.sv:7.15-7.20" *)
  output empty;
  wire empty;
  (* src = "fifo.sv:4.15-4.19" *)
  output full;
  wire full;
  (* src = "fifo.sv:10.14-10.18" *)
  reg [2:0] head;
  (* src = "fifo.sv:10.26-10.31" *)
  wire [2:0] headi;
  (* src = "fifo.sv:2.14-2.16" *)
  input [7:0] in;
  wire [7:0] in;
  reg [7:0] \mem[0] ;
  reg [7:0] \mem[1] ;
  reg [7:0] \mem[2] ;
  reg [7:0] \mem[3] ;
  reg [7:0] \mem[4] ;
  reg [7:0] \mem[5] ;
  reg [7:0] \mem[6] ;
  reg [7:0] \mem[7] ;
  (* src = "fifo.sv:5.15-5.18" *)
  output [7:0] out;
  reg [7:0] out;
  (* src = "fifo.sv:6.8-6.10" *)
  input re;
  wire re;
  (* src = "fifo.sv:8.13-8.16" *)
  input rst;
  wire rst;
  (* src = "fifo.sv:10.20-10.24" *)
  reg [2:0] tail;
  (* src = "fifo.sv:3.8-3.10" *)
  input we;
  wire we;
  assign _107_[0] = ~tail[0];
  assign _011_ = ~(head[0] ^ tail[0]);
  assign _012_ = head[1] ^ tail[1];
  assign _013_ = _011_ & ~(_012_);
  assign _014_ = head[2] ^ tail[2];
  assign empty = _013_ & ~(_014_);
  assign _015_ = head[0] ^ tail[0];
  assign _016_ = ~tail[1];
  assign _017_ = ~(head[0] ^ head[1]);
  assign _018_ = _017_ ^ _016_;
  assign _019_ = _015_ & ~(_018_);
  assign _020_ = ~tail[2];
  assign _021_ = head[0] & head[1];
  assign _022_ = ~(_021_ ^ head[2]);
  assign _023_ = _022_ ^ _020_;
  assign full = _019_ & ~(_023_);
  assign _024_ = ~(full | empty);
  assign _025_ = ~(re & we);
  assign _026_ = _024_ & ~(_025_);
  assign _027_ = full | ~(empty);
  assign _028_ = re | ~(we);
  assign _029_ = ~(_028_ | _027_);
  assign _030_ = _029_ | _026_;
  assign _031_ = _024_ & ~(_028_);
  assign _032_ = _027_ | _025_;
  assign _033_ = _031_ | ~(_032_);
  assign _002_ = _033_ | _030_;
  assign _034_ = full & ~(empty);
  assign _035_ = we | ~(re);
  assign _036_ = _034_ & ~(_035_);
  assign _037_ = _036_ | _026_;
  assign _038_ = _024_ & ~(_035_);
  assign _039_ = _034_ & ~(_025_);
  assign _040_ = _039_ | _038_;
  assign _001_ = _040_ | _037_;
  assign _041_ = tail[0] ? \mem[1] [0] : \mem[0] [0];
  assign _042_ = tail[0] ? \mem[3] [0] : \mem[2] [0];
  assign _043_ = tail[1] ? _042_ : _041_;
  assign _044_ = tail[0] ? \mem[5] [0] : \mem[4] [0];
  assign _045_ = tail[0] ? \mem[7] [0] : \mem[6] [0];
  assign _046_ = tail[1] ? _045_ : _044_;
  assign _000_[0] = tail[2] ? _046_ : _043_;
  assign _047_ = tail[0] ? \mem[1] [1] : \mem[0] [1];
  assign _048_ = tail[0] ? \mem[3] [1] : \mem[2] [1];
  assign _049_ = tail[1] ? _048_ : _047_;
  assign _050_ = tail[0] ? \mem[5] [1] : \mem[4] [1];
  assign _051_ = tail[0] ? \mem[7] [1] : \mem[6] [1];
  assign _052_ = tail[1] ? _051_ : _050_;
  assign _000_[1] = tail[2] ? _052_ : _049_;
  assign _053_ = tail[0] ? \mem[1] [2] : \mem[0] [2];
  assign _054_ = tail[0] ? \mem[3] [2] : \mem[2] [2];
  assign _055_ = tail[1] ? _054_ : _053_;
  assign _056_ = tail[0] ? \mem[5] [2] : \mem[4] [2];
  assign _057_ = tail[0] ? \mem[7] [2] : \mem[6] [2];
  assign _058_ = tail[1] ? _057_ : _056_;
  assign _000_[2] = tail[2] ? _058_ : _055_;
  assign _059_ = tail[0] ? \mem[1] [3] : \mem[0] [3];
  assign _060_ = tail[0] ? \mem[3] [3] : \mem[2] [3];
  assign _061_ = tail[1] ? _060_ : _059_;
  assign _062_ = tail[0] ? \mem[5] [3] : \mem[4] [3];
  assign _063_ = tail[0] ? \mem[7] [3] : \mem[6] [3];
  assign _064_ = tail[1] ? _063_ : _062_;
  assign _000_[3] = tail[2] ? _064_ : _061_;
  assign _065_ = tail[0] ? \mem[1] [4] : \mem[0] [4];
  assign _066_ = tail[0] ? \mem[3] [4] : \mem[2] [4];
  assign _067_ = tail[1] ? _066_ : _065_;
  assign _068_ = tail[0] ? \mem[5] [4] : \mem[4] [4];
  assign _069_ = tail[0] ? \mem[7] [4] : \mem[6] [4];
  assign _070_ = tail[1] ? _069_ : _068_;
  assign _000_[4] = tail[2] ? _070_ : _067_;
  assign _071_ = tail[0] ? \mem[1] [5] : \mem[0] [5];
  assign _072_ = tail[0] ? \mem[3] [5] : \mem[2] [5];
  assign _073_ = tail[1] ? _072_ : _071_;
  assign _074_ = tail[0] ? \mem[5] [5] : \mem[4] [5];
  assign _075_ = tail[0] ? \mem[7] [5] : \mem[6] [5];
  assign _076_ = tail[1] ? _075_ : _074_;
  assign _000_[5] = tail[2] ? _076_ : _073_;
  assign _077_ = tail[0] ? \mem[1] [6] : \mem[0] [6];
  assign _078_ = tail[0] ? \mem[3] [6] : \mem[2] [6];
  assign _079_ = tail[1] ? _078_ : _077_;
  assign _080_ = tail[0] ? \mem[5] [6] : \mem[4] [6];
  assign _081_ = tail[0] ? \mem[7] [6] : \mem[6] [6];
  assign _082_ = tail[1] ? _081_ : _080_;
  assign _000_[6] = tail[2] ? _082_ : _079_;
  assign _083_ = tail[0] ? \mem[1] [7] : \mem[0] [7];
  assign _084_ = tail[0] ? \mem[3] [7] : \mem[2] [7];
  assign _085_ = tail[1] ? _084_ : _083_;
  assign _086_ = tail[0] ? \mem[5] [7] : \mem[4] [7];
  assign _087_ = tail[0] ? \mem[7] [7] : \mem[6] [7];
  assign _088_ = tail[1] ? _087_ : _086_;
  assign _000_[7] = tail[2] ? _088_ : _085_;
  assign headi[0] = ~head[0];
  assign _089_ = ~(head[2] & head[1]);
  assign _090_ = head[0] & ~(_089_);
  assign _091_ = _031_ | _029_;
  assign _092_ = _091_ | ~(_032_);
  assign _093_ = _092_ & ~(rst);
  assign _094_ = _026_ & ~(rst);
  assign _095_ = _094_ | _093_;
  assign _010_ = _095_ & _090_;
  assign _096_ = _089_ | head[0];
  assign _009_ = _095_ & ~(_096_);
  assign headi[1] = ~_017_;
  assign headi[2] = ~_022_;
  assign _097_ = head[2] | head[1];
  assign _098_ = _097_ | headi[0];
  assign _004_ = _095_ & ~(_098_);
  assign _099_ = head[1] | ~(head[2]);
  assign _100_ = _099_ | headi[0];
  assign _008_ = _095_ & ~(_100_);
  assign _101_ = _097_ | head[0];
  assign _003_ = _095_ & ~(_101_);
  assign _102_ = _099_ | head[0];
  assign _007_ = _095_ & ~(_102_);
  assign _103_ = head[2] | ~(head[1]);
  assign _104_ = _103_ | headi[0];
  assign _006_ = _095_ & ~(_104_);
  assign _105_ = _103_ | head[0];
  assign _005_ = _095_ & ~(_105_);
  assign _108_[1] = tail[1] ^ tail[0];
  assign _106_ = tail[1] & tail[0];
  assign _108_[2] = _106_ ^ tail[2];
  always @(posedge clk)
    if (_008_) \mem[5] [0] <= in[0];
  always @(posedge clk)
    if (_008_) \mem[5] [1] <= in[1];
  always @(posedge clk)
    if (_008_) \mem[5] [2] <= in[2];
  always @(posedge clk)
    if (_008_) \mem[5] [3] <= in[3];
  always @(posedge clk)
    if (_008_) \mem[5] [4] <= in[4];
  always @(posedge clk)
    if (_008_) \mem[5] [5] <= in[5];
  always @(posedge clk)
    if (_008_) \mem[5] [6] <= in[6];
  always @(posedge clk)
    if (_008_) \mem[5] [7] <= in[7];
  always @(posedge clk)
    if (_003_) \mem[0] [0] <= in[0];
  always @(posedge clk)
    if (_003_) \mem[0] [1] <= in[1];
  always @(posedge clk)
    if (_003_) \mem[0] [2] <= in[2];
  always @(posedge clk)
    if (_003_) \mem[0] [3] <= in[3];
  always @(posedge clk)
    if (_003_) \mem[0] [4] <= in[4];
  always @(posedge clk)
    if (_003_) \mem[0] [5] <= in[5];
  always @(posedge clk)
    if (_003_) \mem[0] [6] <= in[6];
  always @(posedge clk)
    if (_003_) \mem[0] [7] <= in[7];
  always @(posedge clk)
    if (_007_) \mem[4] [0] <= in[0];
  always @(posedge clk)
    if (_007_) \mem[4] [1] <= in[1];
  always @(posedge clk)
    if (_007_) \mem[4] [2] <= in[2];
  always @(posedge clk)
    if (_007_) \mem[4] [3] <= in[3];
  always @(posedge clk)
    if (_007_) \mem[4] [4] <= in[4];
  always @(posedge clk)
    if (_007_) \mem[4] [5] <= in[5];
  always @(posedge clk)
    if (_007_) \mem[4] [6] <= in[6];
  always @(posedge clk)
    if (_007_) \mem[4] [7] <= in[7];
  always @(posedge clk)
    if (!rst)
      if (!_001_) out[0] <= 1'h0;
      else out[0] <= _000_[0];
  always @(posedge clk)
    if (!rst)
      if (!_001_) out[1] <= 1'h0;
      else out[1] <= _000_[1];
  always @(posedge clk)
    if (!rst)
      if (!_001_) out[2] <= 1'h0;
      else out[2] <= _000_[2];
  always @(posedge clk)
    if (!rst)
      if (!_001_) out[3] <= 1'h0;
      else out[3] <= _000_[3];
  always @(posedge clk)
    if (!rst)
      if (!_001_) out[4] <= 1'h0;
      else out[4] <= _000_[4];
  always @(posedge clk)
    if (!rst)
      if (!_001_) out[5] <= 1'h0;
      else out[5] <= _000_[5];
  always @(posedge clk)
    if (!rst)
      if (!_001_) out[6] <= 1'h0;
      else out[6] <= _000_[6];
  always @(posedge clk)
    if (!rst)
      if (!_001_) out[7] <= 1'h0;
      else out[7] <= _000_[7];
  always @(posedge clk)
    if (_006_) \mem[3] [0] <= in[0];
  always @(posedge clk)
    if (_006_) \mem[3] [1] <= in[1];
  always @(posedge clk)
    if (_006_) \mem[3] [2] <= in[2];
  always @(posedge clk)
    if (_006_) \mem[3] [3] <= in[3];
  always @(posedge clk)
    if (_006_) \mem[3] [4] <= in[4];
  always @(posedge clk)
    if (_006_) \mem[3] [5] <= in[5];
  always @(posedge clk)
    if (_006_) \mem[3] [6] <= in[6];
  always @(posedge clk)
    if (_006_) \mem[3] [7] <= in[7];
  always @(posedge clk)
    if (_005_) \mem[2] [0] <= in[0];
  always @(posedge clk)
    if (_005_) \mem[2] [1] <= in[1];
  always @(posedge clk)
    if (_005_) \mem[2] [2] <= in[2];
  always @(posedge clk)
    if (_005_) \mem[2] [3] <= in[3];
  always @(posedge clk)
    if (_005_) \mem[2] [4] <= in[4];
  always @(posedge clk)
    if (_005_) \mem[2] [5] <= in[5];
  always @(posedge clk)
    if (_005_) \mem[2] [6] <= in[6];
  always @(posedge clk)
    if (_005_) \mem[2] [7] <= in[7];
  always @(posedge clk)
    if (_010_) \mem[7] [0] <= in[0];
  always @(posedge clk)
    if (_010_) \mem[7] [1] <= in[1];
  always @(posedge clk)
    if (_010_) \mem[7] [2] <= in[2];
  always @(posedge clk)
    if (_010_) \mem[7] [3] <= in[3];
  always @(posedge clk)
    if (_010_) \mem[7] [4] <= in[4];
  always @(posedge clk)
    if (_010_) \mem[7] [5] <= in[5];
  always @(posedge clk)
    if (_010_) \mem[7] [6] <= in[6];
  always @(posedge clk)
    if (_010_) \mem[7] [7] <= in[7];
  always @(posedge clk)
    if (_009_) \mem[6] [0] <= in[0];
  always @(posedge clk)
    if (_009_) \mem[6] [1] <= in[1];
  always @(posedge clk)
    if (_009_) \mem[6] [2] <= in[2];
  always @(posedge clk)
    if (_009_) \mem[6] [3] <= in[3];
  always @(posedge clk)
    if (_009_) \mem[6] [4] <= in[4];
  always @(posedge clk)
    if (_009_) \mem[6] [5] <= in[5];
  always @(posedge clk)
    if (_009_) \mem[6] [6] <= in[6];
  always @(posedge clk)
    if (_009_) \mem[6] [7] <= in[7];
  always @(posedge clk)
    if (_004_) \mem[1] [0] <= in[0];
  always @(posedge clk)
    if (_004_) \mem[1] [1] <= in[1];
  always @(posedge clk)
    if (_004_) \mem[1] [2] <= in[2];
  always @(posedge clk)
    if (_004_) \mem[1] [3] <= in[3];
  always @(posedge clk)
    if (_004_) \mem[1] [4] <= in[4];
  always @(posedge clk)
    if (_004_) \mem[1] [5] <= in[5];
  always @(posedge clk)
    if (_004_) \mem[1] [6] <= in[6];
  always @(posedge clk)
    if (_004_) \mem[1] [7] <= in[7];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-39.5" *)
  always @(posedge clk)
    if (rst) head[0] <= 1'h0;
    else if (_002_) head[0] <= headi[0];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-39.5" *)
  always @(posedge clk)
    if (rst) head[1] <= 1'h0;
    else if (_002_) head[1] <= headi[1];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-39.5" *)
  always @(posedge clk)
    if (rst) head[2] <= 1'h0;
    else if (_002_) head[2] <= headi[2];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-39.5" *)
  always @(posedge clk)
    if (rst) tail[0] <= 1'h0;
    else if (_001_) tail[0] <= _107_[0];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-39.5" *)
  always @(posedge clk)
    if (rst) tail[1] <= 1'h0;
    else if (_001_) tail[1] <= _108_[1];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-39.5" *)
  always @(posedge clk)
    if (rst) tail[2] <= 1'h0;
    else if (_001_) tail[2] <= _108_[2];
  assign _107_[2:1] = tail[2:1];
  assign _108_[0] = _107_[0];
endmodule
