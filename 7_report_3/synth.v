/* Generated by Yosys 0.29 (git sha1 9c5a60eb201, clang 14.0.3 -fPIC -Os) */

(* top =  1  *)
(* src = "fifo.sv:2.1-32.10" *)
module fifo(in, we, full, out, re, empty, clk, rst);
  (* src = "fifo.sv:13.2-23.5" *)
  wire [7:0] _000_;
  wire [7:0] _001_;
  (* src = "fifo.sv:18.6-18.18" *)
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  (* force_downto = 32'd1 *)
  (* src = "fifo.sv:19.12-19.20|/opt/homebrew/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [2:0] _083_;
  (* force_downto = 32'd1 *)
  (* src = "fifo.sv:19.12-19.20|/opt/homebrew/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [2:0] _084_;
  (* src = "fifo.sv:9.8-9.11" *)
  input clk;
  wire clk;
  (* src = "fifo.sv:8.15-8.20" *)
  output empty;
  wire empty;
  (* src = "fifo.sv:5.15-5.19" *)
  output full;
  wire full;
  (* src = "fifo.sv:11.14-11.18" *)
  reg [2:0] head = 3'h0;
  (* src = "fifo.sv:11.34-11.39" *)
  wire [2:0] headi;
  (* src = "fifo.sv:3.14-3.16" *)
  input [7:0] in;
  wire [7:0] in;
  reg [7:0] \mem[0] ;
  reg [7:0] \mem[1] ;
  reg [7:0] \mem[2] ;
  reg [7:0] \mem[3] ;
  reg [7:0] \mem[4] ;
  reg [7:0] \mem[5] ;
  reg [7:0] \mem[6] ;
  reg [7:0] \mem[7] ;
  (* src = "fifo.sv:6.21-6.24" *)
  output [7:0] out;
  reg [7:0] out;
  (* src = "fifo.sv:7.8-7.10" *)
  input re;
  wire re;
  (* src = "fifo.sv:9.13-9.16" *)
  input rst;
  wire rst;
  (* src = "fifo.sv:11.24-11.28" *)
  reg [2:0] tail = 3'h0;
  (* src = "fifo.sv:4.8-4.10" *)
  input we;
  wire we;
  assign _083_[0] = ~tail[0];
  assign _011_ = ~(head[0] ^ tail[0]);
  assign _012_ = head[1] ^ tail[1];
  assign _013_ = _011_ & ~(_012_);
  assign _014_ = head[2] ^ tail[2];
  assign empty = _013_ & ~(_014_);
  assign _015_ = head[0] ^ tail[0];
  assign _016_ = ~tail[1];
  assign _017_ = ~(head[1] ^ head[0]);
  assign _018_ = _017_ ^ _016_;
  assign _019_ = _015_ & ~(_018_);
  assign _020_ = head[1] & head[0];
  assign headi[2] = _020_ ^ head[2];
  assign _021_ = headi[2] ^ tail[2];
  assign full = _019_ & ~(_021_);
  assign _000_[7] = we & ~(full);
  assign _002_ = re & ~(empty);
  assign _022_ = tail[0] ? \mem[1] [0] : \mem[0] [0];
  assign _023_ = tail[0] ? \mem[3] [0] : \mem[2] [0];
  assign _024_ = tail[1] ? _023_ : _022_;
  assign _025_ = tail[0] ? \mem[5] [0] : \mem[4] [0];
  assign _026_ = tail[0] ? \mem[7] [0] : \mem[6] [0];
  assign _027_ = tail[1] ? _026_ : _025_;
  assign _001_[0] = tail[2] ? _027_ : _024_;
  assign _028_ = tail[0] ? \mem[1] [1] : \mem[0] [1];
  assign _029_ = tail[0] ? \mem[3] [1] : \mem[2] [1];
  assign _030_ = tail[1] ? _029_ : _028_;
  assign _031_ = tail[0] ? \mem[5] [1] : \mem[4] [1];
  assign _032_ = tail[0] ? \mem[7] [1] : \mem[6] [1];
  assign _033_ = tail[1] ? _032_ : _031_;
  assign _001_[1] = tail[2] ? _033_ : _030_;
  assign _034_ = tail[0] ? \mem[1] [2] : \mem[0] [2];
  assign _035_ = tail[0] ? \mem[3] [2] : \mem[2] [2];
  assign _036_ = tail[1] ? _035_ : _034_;
  assign _037_ = tail[0] ? \mem[5] [2] : \mem[4] [2];
  assign _038_ = tail[0] ? \mem[7] [2] : \mem[6] [2];
  assign _039_ = tail[1] ? _038_ : _037_;
  assign _001_[2] = tail[2] ? _039_ : _036_;
  assign _040_ = tail[0] ? \mem[1] [3] : \mem[0] [3];
  assign _041_ = tail[0] ? \mem[3] [3] : \mem[2] [3];
  assign _042_ = tail[1] ? _041_ : _040_;
  assign _043_ = tail[0] ? \mem[5] [3] : \mem[4] [3];
  assign _044_ = tail[0] ? \mem[7] [3] : \mem[6] [3];
  assign _045_ = tail[1] ? _044_ : _043_;
  assign _001_[3] = tail[2] ? _045_ : _042_;
  assign _046_ = tail[0] ? \mem[1] [4] : \mem[0] [4];
  assign _047_ = tail[0] ? \mem[3] [4] : \mem[2] [4];
  assign _048_ = tail[1] ? _047_ : _046_;
  assign _049_ = tail[0] ? \mem[5] [4] : \mem[4] [4];
  assign _050_ = tail[0] ? \mem[7] [4] : \mem[6] [4];
  assign _051_ = tail[1] ? _050_ : _049_;
  assign _001_[4] = tail[2] ? _051_ : _048_;
  assign _052_ = tail[0] ? \mem[1] [5] : \mem[0] [5];
  assign _053_ = tail[0] ? \mem[3] [5] : \mem[2] [5];
  assign _054_ = tail[1] ? _053_ : _052_;
  assign _055_ = tail[0] ? \mem[5] [5] : \mem[4] [5];
  assign _056_ = tail[0] ? \mem[7] [5] : \mem[6] [5];
  assign _057_ = tail[1] ? _056_ : _055_;
  assign _001_[5] = tail[2] ? _057_ : _054_;
  assign _058_ = tail[0] ? \mem[1] [6] : \mem[0] [6];
  assign _059_ = tail[0] ? \mem[3] [6] : \mem[2] [6];
  assign _060_ = tail[1] ? _059_ : _058_;
  assign _061_ = tail[0] ? \mem[5] [6] : \mem[4] [6];
  assign _062_ = tail[0] ? \mem[7] [6] : \mem[6] [6];
  assign _063_ = tail[1] ? _062_ : _061_;
  assign _001_[6] = tail[2] ? _063_ : _060_;
  assign _064_ = tail[0] ? \mem[1] [7] : \mem[0] [7];
  assign _065_ = tail[0] ? \mem[3] [7] : \mem[2] [7];
  assign _066_ = tail[1] ? _065_ : _064_;
  assign _067_ = tail[0] ? \mem[5] [7] : \mem[4] [7];
  assign _068_ = tail[0] ? \mem[7] [7] : \mem[6] [7];
  assign _069_ = tail[1] ? _068_ : _067_;
  assign _001_[7] = tail[2] ? _069_ : _066_;
  assign headi[0] = ~head[0];
  assign headi[1] = ~_017_;
  assign _070_ = head[2] | head[1];
  assign _071_ = _070_ | head[0];
  assign _003_ = _000_[7] & ~(_071_);
  assign _072_ = _070_ | headi[0];
  assign _004_ = _000_[7] & ~(_072_);
  assign _073_ = head[2] | ~(head[1]);
  assign _074_ = _073_ | head[0];
  assign _005_ = _000_[7] & ~(_074_);
  assign _075_ = _073_ | headi[0];
  assign _006_ = _000_[7] & ~(_075_);
  assign _076_ = head[1] | ~(head[2]);
  assign _077_ = _076_ | head[0];
  assign _007_ = _000_[7] & ~(_077_);
  assign _078_ = _076_ | headi[0];
  assign _008_ = _000_[7] & ~(_078_);
  assign _079_ = ~(head[2] & head[1]);
  assign _080_ = _079_ | head[0];
  assign _009_ = _000_[7] & ~(_080_);
  assign _081_ = _079_ | headi[0];
  assign _010_ = _000_[7] & ~(_081_);
  assign _084_[1] = tail[1] ^ tail[0];
  assign _082_ = tail[1] & tail[0];
  assign _084_[2] = _082_ ^ tail[2];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-23.5" *)
  always @(negedge clk)
    if (_002_) tail[0] <= _083_[0];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-23.5" *)
  always @(negedge clk)
    if (_002_) tail[1] <= _084_[1];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-23.5" *)
  always @(negedge clk)
    if (_002_) tail[2] <= _084_[2];
  always @(negedge clk)
    if (_003_) \mem[0] [0] <= in[0];
  always @(negedge clk)
    if (_003_) \mem[0] [1] <= in[1];
  always @(negedge clk)
    if (_003_) \mem[0] [2] <= in[2];
  always @(negedge clk)
    if (_003_) \mem[0] [3] <= in[3];
  always @(negedge clk)
    if (_003_) \mem[0] [4] <= in[4];
  always @(negedge clk)
    if (_003_) \mem[0] [5] <= in[5];
  always @(negedge clk)
    if (_003_) \mem[0] [6] <= in[6];
  always @(negedge clk)
    if (_003_) \mem[0] [7] <= in[7];
  always @(negedge clk)
    if (!_002_) out[0] <= 1'h0;
    else out[0] <= _001_[0];
  always @(negedge clk)
    if (!_002_) out[1] <= 1'h0;
    else out[1] <= _001_[1];
  always @(negedge clk)
    if (!_002_) out[2] <= 1'h0;
    else out[2] <= _001_[2];
  always @(negedge clk)
    if (!_002_) out[3] <= 1'h0;
    else out[3] <= _001_[3];
  always @(negedge clk)
    if (!_002_) out[4] <= 1'h0;
    else out[4] <= _001_[4];
  always @(negedge clk)
    if (!_002_) out[5] <= 1'h0;
    else out[5] <= _001_[5];
  always @(negedge clk)
    if (!_002_) out[6] <= 1'h0;
    else out[6] <= _001_[6];
  always @(negedge clk)
    if (!_002_) out[7] <= 1'h0;
    else out[7] <= _001_[7];
  always @(negedge clk)
    if (_005_) \mem[2] [0] <= in[0];
  always @(negedge clk)
    if (_005_) \mem[2] [1] <= in[1];
  always @(negedge clk)
    if (_005_) \mem[2] [2] <= in[2];
  always @(negedge clk)
    if (_005_) \mem[2] [3] <= in[3];
  always @(negedge clk)
    if (_005_) \mem[2] [4] <= in[4];
  always @(negedge clk)
    if (_005_) \mem[2] [5] <= in[5];
  always @(negedge clk)
    if (_005_) \mem[2] [6] <= in[6];
  always @(negedge clk)
    if (_005_) \mem[2] [7] <= in[7];
  always @(negedge clk)
    if (_008_) \mem[5] [0] <= in[0];
  always @(negedge clk)
    if (_008_) \mem[5] [1] <= in[1];
  always @(negedge clk)
    if (_008_) \mem[5] [2] <= in[2];
  always @(negedge clk)
    if (_008_) \mem[5] [3] <= in[3];
  always @(negedge clk)
    if (_008_) \mem[5] [4] <= in[4];
  always @(negedge clk)
    if (_008_) \mem[5] [5] <= in[5];
  always @(negedge clk)
    if (_008_) \mem[5] [6] <= in[6];
  always @(negedge clk)
    if (_008_) \mem[5] [7] <= in[7];
  always @(negedge clk)
    if (_004_) \mem[1] [0] <= in[0];
  always @(negedge clk)
    if (_004_) \mem[1] [1] <= in[1];
  always @(negedge clk)
    if (_004_) \mem[1] [2] <= in[2];
  always @(negedge clk)
    if (_004_) \mem[1] [3] <= in[3];
  always @(negedge clk)
    if (_004_) \mem[1] [4] <= in[4];
  always @(negedge clk)
    if (_004_) \mem[1] [5] <= in[5];
  always @(negedge clk)
    if (_004_) \mem[1] [6] <= in[6];
  always @(negedge clk)
    if (_004_) \mem[1] [7] <= in[7];
  always @(negedge clk)
    if (_006_) \mem[3] [0] <= in[0];
  always @(negedge clk)
    if (_006_) \mem[3] [1] <= in[1];
  always @(negedge clk)
    if (_006_) \mem[3] [2] <= in[2];
  always @(negedge clk)
    if (_006_) \mem[3] [3] <= in[3];
  always @(negedge clk)
    if (_006_) \mem[3] [4] <= in[4];
  always @(negedge clk)
    if (_006_) \mem[3] [5] <= in[5];
  always @(negedge clk)
    if (_006_) \mem[3] [6] <= in[6];
  always @(negedge clk)
    if (_006_) \mem[3] [7] <= in[7];
  always @(negedge clk)
    if (_007_) \mem[4] [0] <= in[0];
  always @(negedge clk)
    if (_007_) \mem[4] [1] <= in[1];
  always @(negedge clk)
    if (_007_) \mem[4] [2] <= in[2];
  always @(negedge clk)
    if (_007_) \mem[4] [3] <= in[3];
  always @(negedge clk)
    if (_007_) \mem[4] [4] <= in[4];
  always @(negedge clk)
    if (_007_) \mem[4] [5] <= in[5];
  always @(negedge clk)
    if (_007_) \mem[4] [6] <= in[6];
  always @(negedge clk)
    if (_007_) \mem[4] [7] <= in[7];
  always @(negedge clk)
    if (_009_) \mem[6] [0] <= in[0];
  always @(negedge clk)
    if (_009_) \mem[6] [1] <= in[1];
  always @(negedge clk)
    if (_009_) \mem[6] [2] <= in[2];
  always @(negedge clk)
    if (_009_) \mem[6] [3] <= in[3];
  always @(negedge clk)
    if (_009_) \mem[6] [4] <= in[4];
  always @(negedge clk)
    if (_009_) \mem[6] [5] <= in[5];
  always @(negedge clk)
    if (_009_) \mem[6] [6] <= in[6];
  always @(negedge clk)
    if (_009_) \mem[6] [7] <= in[7];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-23.5" *)
  always @(negedge clk)
    if (_000_[7]) head[0] <= headi[0];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-23.5" *)
  always @(negedge clk)
    if (_000_[7]) head[1] <= headi[1];
  (* \always_ff  = 32'd1 *)
  (* src = "fifo.sv:13.2-23.5" *)
  always @(negedge clk)
    if (_000_[7]) head[2] <= headi[2];
  always @(negedge clk)
    if (_010_) \mem[7] [0] <= in[0];
  always @(negedge clk)
    if (_010_) \mem[7] [1] <= in[1];
  always @(negedge clk)
    if (_010_) \mem[7] [2] <= in[2];
  always @(negedge clk)
    if (_010_) \mem[7] [3] <= in[3];
  always @(negedge clk)
    if (_010_) \mem[7] [4] <= in[4];
  always @(negedge clk)
    if (_010_) \mem[7] [5] <= in[5];
  always @(negedge clk)
    if (_010_) \mem[7] [6] <= in[6];
  always @(negedge clk)
    if (_010_) \mem[7] [7] <= in[7];
  assign _000_[6:0] = { _000_[7], _000_[7], _000_[7], _000_[7], _000_[7], _000_[7], _000_[7] };
  assign _083_[2:1] = tail[2:1];
  assign _084_[0] = _083_[0];
endmodule
