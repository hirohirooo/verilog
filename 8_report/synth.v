/* Generated by Yosys 0.29 (git sha1 9c5a60eb201, clang 14.0.3 -fPIC -Os) */

(* src = "alu.sv:1.1-22.10" *)
module alu(a, b, op, r);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  (* src = "alu.sv:1.25-1.26" *)
  input [15:0] a;
  wire [15:0] a;
  (* src = "alu.sv:1.28-1.29" *)
  input [15:0] b;
  wire [15:0] b;
  (* src = "alu.sv:1.43-1.45" *)
  input [2:0] op;
  wire [2:0] op;
  (* src = "alu.sv:1.67-1.68" *)
  output [15:0] r;
  wire [15:0] r;
  assign _190_ = a[0] ^ b[0];
  assign _191_ = op[0] | ~(op[1]);
  assign _192_ = ~(op[1] | op[0]);
  assign _193_ = ~_192_;
  assign _194_ = op[2] ? _191_ : _193_;
  assign _195_ = _190_ & ~(_194_);
  assign _196_ = op[1] | ~(op[0]);
  assign _197_ = op[2] & ~(_196_);
  assign _198_ = _197_ | _195_;
  assign _199_ = op[1] & op[0];
  assign _200_ = _199_ & ~(op[2]);
  assign _201_ = _200_ | _198_;
  assign _202_ = _196_ | op[2];
  assign _203_ = a[0] & ~(_202_);
  assign _204_ = _203_ | _201_;
  assign _205_ = _197_ | ~(_194_);
  assign _206_ = op[2] ? _192_ : _199_;
  assign _207_ = _206_ | _205_;
  assign _208_ = _207_ | ~(_202_);
  assign r[0] = _208_ & _204_;
  assign _209_ = ~(_192_ & op[2]);
  assign _210_ = op[2] & ~(_191_);
  assign _211_ = b[0] ^ b[1];
  assign _212_ = _210_ ? b[1] : _211_;
  assign _213_ = ~(_212_ ^ a[1]);
  assign _214_ = b[0] & ~(a[0]);
  assign _215_ = _214_ ^ _213_;
  assign _216_ = ~(_215_ | _194_);
  assign _217_ = _216_ | _197_;
  assign _218_ = _209_ & ~(_217_);
  assign _219_ = a[1] & ~(_202_);
  assign _220_ = _218_ & ~(_219_);
  assign r[1] = _208_ & ~(_220_);
  assign _221_ = ~b[2];
  assign _222_ = ~(b[0] | b[1]);
  assign _223_ = _222_ ^ b[2];
  assign _224_ = _210_ ? _221_ : _223_;
  assign _225_ = ~(_224_ ^ a[2]);
  assign _226_ = a[1] & ~(_212_);
  assign _227_ = _213_ & ~(_214_);
  assign _228_ = _227_ | _226_;
  assign _229_ = _228_ ^ _225_;
  assign _230_ = _229_ | _194_;
  assign _231_ = a[2] & ~(_202_);
  assign _232_ = _230_ & ~(_231_);
  assign r[2] = _208_ & ~(_232_);
  assign _233_ = ~b[3];
  assign _234_ = _222_ & ~(b[2]);
  assign _000_ = _234_ ^ b[3];
  assign _001_ = _210_ ? _233_ : _000_;
  assign _002_ = _001_ ^ a[3];
  assign _003_ = ~(_224_ & a[2]);
  assign _004_ = _228_ & ~(_225_);
  assign _005_ = _003_ & ~(_004_);
  assign _006_ = _005_ ^ _002_;
  assign _007_ = _006_ | _194_;
  assign _008_ = a[3] & ~(_202_);
  assign _009_ = _007_ & ~(_008_);
  assign r[3] = _208_ & ~(_009_);
  assign _010_ = ~b[4];
  assign _011_ = b[3] | b[2];
  assign _012_ = _222_ & ~(_011_);
  assign _013_ = _012_ ^ b[4];
  assign _014_ = _210_ ? _010_ : _013_;
  assign _015_ = ~(_014_ ^ a[4]);
  assign _016_ = _001_ & a[3];
  assign _017_ = _002_ & ~(_003_);
  assign _018_ = _017_ | _016_;
  assign _019_ = _225_ | ~(_002_);
  assign _020_ = _228_ & ~(_019_);
  assign _021_ = _020_ | _018_;
  assign _022_ = _021_ ^ _015_;
  assign _023_ = _022_ | _194_;
  assign _024_ = a[4] & ~(_202_);
  assign _025_ = _023_ & ~(_024_);
  assign r[4] = _208_ & ~(_025_);
  assign _026_ = ~b[5];
  assign _027_ = _012_ & ~(b[4]);
  assign _028_ = _027_ ^ _026_;
  assign _029_ = _210_ ? b[5] : _028_;
  assign _030_ = ~(_029_ ^ a[5]);
  assign _031_ = ~(_014_ & a[4]);
  assign _032_ = _021_ & ~(_015_);
  assign _033_ = _031_ & ~(_032_);
  assign _034_ = _033_ ^ _030_;
  assign _035_ = _034_ | _194_;
  assign _036_ = a[5] & ~(_202_);
  assign _037_ = _035_ & ~(_036_);
  assign r[5] = _208_ & ~(_037_);
  assign _038_ = ~b[6];
  assign _039_ = b[5] | b[4];
  assign _040_ = _012_ & ~(_039_);
  assign _041_ = _040_ ^ b[6];
  assign _042_ = _210_ ? _038_ : _041_;
  assign _043_ = ~(_042_ ^ a[6]);
  assign _044_ = ~_043_;
  assign _045_ = a[5] & ~(_029_);
  assign _046_ = _030_ & ~(_031_);
  assign _047_ = _046_ | _045_;
  assign _048_ = _015_ | ~(_030_);
  assign _049_ = _048_ | ~(_021_);
  assign _050_ = _049_ & ~(_047_);
  assign _051_ = _050_ ^ _044_;
  assign _052_ = _051_ | _194_;
  assign _053_ = a[6] & ~(_202_);
  assign _054_ = _052_ & ~(_053_);
  assign r[6] = _208_ & ~(_054_);
  assign _055_ = ~b[7];
  assign _056_ = _040_ & ~(b[6]);
  assign _057_ = _056_ ^ _055_;
  assign _058_ = _210_ ? b[7] : _057_;
  assign _059_ = ~(_058_ ^ a[7]);
  assign _060_ = ~(_042_ & a[6]);
  assign _061_ = _044_ & ~(_050_);
  assign _062_ = _060_ & ~(_061_);
  assign _063_ = _062_ ^ _059_;
  assign _064_ = _063_ | _194_;
  assign _065_ = a[7] & ~(_202_);
  assign _066_ = _064_ & ~(_065_);
  assign r[7] = _208_ & ~(_066_);
  assign _067_ = ~b[8];
  assign _068_ = b[7] | b[6];
  assign _069_ = _068_ | _039_;
  assign _070_ = _012_ & ~(_069_);
  assign _071_ = _070_ ^ b[8];
  assign _072_ = _210_ ? _067_ : _071_;
  assign _073_ = ~(_072_ ^ a[8]);
  assign _074_ = ~_073_;
  assign _075_ = a[7] & ~(_058_);
  assign _076_ = _059_ & ~(_060_);
  assign _077_ = ~(_076_ | _075_);
  assign _078_ = ~(_059_ & _044_);
  assign _079_ = _047_ & ~(_078_);
  assign _080_ = _077_ & ~(_079_);
  assign _081_ = _078_ | _048_;
  assign _082_ = _021_ & ~(_081_);
  assign _083_ = _080_ & ~(_082_);
  assign _084_ = _083_ ^ _074_;
  assign _085_ = _084_ | _194_;
  assign _086_ = a[8] & ~(_202_);
  assign _087_ = _085_ & ~(_086_);
  assign r[8] = _208_ & ~(_087_);
  assign _088_ = ~b[9];
  assign _089_ = _070_ & ~(b[8]);
  assign _090_ = _089_ ^ b[9];
  assign _091_ = _210_ ? _088_ : _090_;
  assign _092_ = _091_ ^ a[9];
  assign _093_ = ~(_072_ & a[8]);
  assign _094_ = _074_ & ~(_083_);
  assign _095_ = _093_ & ~(_094_);
  assign _096_ = _095_ ^ _092_;
  assign _097_ = _096_ | _194_;
  assign _098_ = a[9] & ~(_202_);
  assign _099_ = _097_ & ~(_098_);
  assign r[9] = _208_ & ~(_099_);
  assign _100_ = ~b[10];
  assign _101_ = b[9] | b[8];
  assign _102_ = _070_ & ~(_101_);
  assign _103_ = _102_ ^ b[10];
  assign _104_ = _210_ ? _100_ : _103_;
  assign _105_ = ~(_104_ ^ a[10]);
  assign _106_ = ~_105_;
  assign _107_ = _091_ & a[9];
  assign _108_ = _092_ & ~(_093_);
  assign _109_ = _108_ | _107_;
  assign _110_ = ~(_092_ & _074_);
  assign _111_ = _110_ | _083_;
  assign _112_ = _111_ & ~(_109_);
  assign _113_ = _112_ ^ _106_;
  assign _114_ = _113_ | _194_;
  assign _115_ = a[10] & ~(_202_);
  assign _116_ = _114_ & ~(_115_);
  assign r[10] = _208_ & ~(_116_);
  assign _117_ = ~b[11];
  assign _118_ = _102_ & ~(b[10]);
  assign _119_ = _118_ ^ b[11];
  assign _120_ = _210_ ? _117_ : _119_;
  assign _121_ = _120_ ^ a[11];
  assign _122_ = ~(_104_ & a[10]);
  assign _123_ = _106_ & ~(_112_);
  assign _124_ = _122_ & ~(_123_);
  assign _125_ = _124_ ^ _121_;
  assign _126_ = _125_ | _194_;
  assign _127_ = a[11] & ~(_202_);
  assign _128_ = _126_ & ~(_127_);
  assign r[11] = _208_ & ~(_128_);
  assign _129_ = ~b[12];
  assign _130_ = b[11] | b[10];
  assign _131_ = _130_ | _101_;
  assign _132_ = _070_ & ~(_131_);
  assign _133_ = _132_ ^ b[12];
  assign _134_ = _210_ ? _129_ : _133_;
  assign _135_ = ~(_134_ ^ a[12]);
  assign _136_ = ~_135_;
  assign _137_ = ~(_120_ & a[11]);
  assign _138_ = _121_ & ~(_122_);
  assign _139_ = _137_ & ~(_138_);
  assign _140_ = ~(_121_ & _106_);
  assign _141_ = _109_ & ~(_140_);
  assign _142_ = _139_ & ~(_141_);
  assign _143_ = ~(_140_ | _110_);
  assign _144_ = _143_ & ~(_083_);
  assign _145_ = _142_ & ~(_144_);
  assign _146_ = _145_ ^ _136_;
  assign _147_ = _146_ | _194_;
  assign _148_ = a[12] & ~(_202_);
  assign _149_ = _147_ & ~(_148_);
  assign r[12] = _208_ & ~(_149_);
  assign _150_ = ~b[13];
  assign _151_ = _132_ & ~(b[12]);
  assign _152_ = _151_ ^ b[13];
  assign _153_ = _210_ ? _150_ : _152_;
  assign _154_ = _153_ ^ a[13];
  assign _155_ = ~(_134_ & a[12]);
  assign _156_ = _136_ & ~(_145_);
  assign _157_ = _155_ & ~(_156_);
  assign _158_ = _157_ ^ _154_;
  assign _159_ = _158_ | _194_;
  assign _160_ = a[13] & ~(_202_);
  assign _161_ = _159_ & ~(_160_);
  assign r[13] = _208_ & ~(_161_);
  assign _162_ = ~b[14];
  assign _163_ = b[13] | b[12];
  assign _164_ = _132_ & ~(_163_);
  assign _165_ = _164_ ^ b[14];
  assign _166_ = _210_ ? _162_ : _165_;
  assign _167_ = _166_ ^ a[14];
  assign _168_ = ~(_153_ & a[13]);
  assign _169_ = _154_ & ~(_155_);
  assign _170_ = _168_ & ~(_169_);
  assign _171_ = ~(_154_ & _136_);
  assign _172_ = ~(_171_ | _145_);
  assign _173_ = _170_ & ~(_172_);
  assign _174_ = _173_ ^ _167_;
  assign _175_ = _174_ | _194_;
  assign _176_ = a[14] & ~(_202_);
  assign _177_ = _175_ & ~(_176_);
  assign r[14] = _208_ & ~(_177_);
  assign _178_ = ~b[15];
  assign _179_ = _164_ & ~(b[14]);
  assign _180_ = _179_ ^ b[15];
  assign _181_ = _210_ ? _178_ : _180_;
  assign _182_ = _181_ ^ a[15];
  assign _183_ = ~(_166_ & a[14]);
  assign _184_ = _167_ & ~(_173_);
  assign _185_ = _183_ & ~(_184_);
  assign _186_ = _185_ ^ _182_;
  assign _187_ = _186_ | _194_;
  assign _188_ = a[15] & ~(_202_);
  assign _189_ = _187_ & ~(_188_);
  assign r[15] = _208_ & ~(_189_);
endmodule

(* src = "dec.sv:1.1-8.10" *)
module dec(o, aradr, bradr, op, wadr, we, halt);
  (* src = "dec.sv:1.47-1.52" *)
  output [1:0] aradr;
  wire [1:0] aradr;
  (* src = "dec.sv:1.54-1.59" *)
  output [1:0] bradr;
  wire [1:0] bradr;
  (* src = "dec.sv:1.126-1.130" *)
  output halt;
  wire halt;
  (* src = "dec.sv:1.25-1.26" *)
  input [10:0] o;
  wire [10:0] o;
  (* src = "dec.sv:1.80-1.82" *)
  output [2:0] op;
  wire [2:0] op;
  (* src = "dec.sv:1.103-1.107" *)
  output [1:0] wadr;
  wire [1:0] wadr;
  (* src = "dec.sv:1.122-1.124" *)
  output we;
  wire we;
  assign aradr = o[1:0];
  assign bradr = o[3:2];
  assign halt = o[10];
  assign op = o[6:4];
  assign wadr = o[8:7];
  assign we = o[9];
endmodule

(* src = "imem.sv:1.1-39.10" *)
module imem(pc, o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  (* src = "imem.sv:1.48-1.49" *)
  output [10:0] o;
  wire [10:0] o;
  (* src = "imem.sv:1.25-1.27" *)
  input [5:0] pc;
  wire [5:0] pc;
  assign _000_ = ~pc[5];
  assign _001_ = ~pc[4];
  assign _002_ = ~pc[0];
  assign _003_ = pc[0] & ~(pc[1]);
  assign _004_ = pc[2] ? _002_ : _003_;
  assign _005_ = pc[3] ? _002_ : _004_;
  assign _006_ = ~pc[3];
  assign _007_ = ~pc[2];
  assign _008_ = pc[1] | ~(pc[0]);
  assign _009_ = pc[2] ? _008_ : _002_;
  assign _010_ = pc[3] ? _009_ : _002_;
  assign _011_ = pc[4] ? _010_ : _005_;
  assign o[0] = _000_ & ~(_011_);
  assign _012_ = pc[0] | ~(pc[1]);
  assign _013_ = _012_ | _007_;
  assign _014_ = pc[1] & ~(pc[0]);
  assign _015_ = _008_ & ~(_014_);
  assign _016_ = pc[3] ? _015_ : _013_;
  assign _017_ = ~(pc[0] ^ pc[1]);
  assign _018_ = pc[4] ? _017_ : _016_;
  assign o[1] = _000_ & ~(_018_);
  assign _019_ = pc[3] ? _012_ : _013_;
  assign _020_ = pc[4] ? _012_ : _019_;
  assign o[2] = _000_ & ~(_020_);
  assign _021_ = pc[2] ? _014_ : _002_;
  assign _022_ = pc[3] ? _014_ : _021_;
  assign _023_ = pc[2] ? pc[1] : _014_;
  assign _024_ = pc[3] ? _023_ : _014_;
  assign _025_ = pc[4] ? _024_ : _022_;
  assign o[4] = _000_ & ~(_025_);
  assign _026_ = pc[0] | pc[1];
  assign _027_ = _026_ | pc[2];
  assign _028_ = _027_ | pc[3];
  assign _029_ = _028_ | pc[4];
  assign o[5] = _000_ & ~(_029_);
  assign _030_ = pc[2] ? _008_ : _012_;
  assign _031_ = _030_ | pc[3];
  assign _032_ = _031_ | pc[4];
  assign o[6] = _000_ & ~(_032_);
  assign _033_ = pc[2] ? pc[0] : _008_;
  assign _034_ = pc[3] ? pc[0] : _033_;
  assign _035_ = _026_ & ~(_014_);
  assign _036_ = pc[2] ? _035_ : pc[0];
  assign _037_ = pc[3] ? _036_ : pc[0];
  assign _038_ = pc[4] ? _037_ : _034_;
  assign o[7] = _000_ & ~(_038_);
  assign _039_ = ~pc[1];
  assign _040_ = ~(pc[0] & pc[1]);
  assign _041_ = pc[2] ? _039_ : _040_;
  assign _042_ = pc[3] ? _039_ : _041_;
  assign _043_ = pc[2] ? _012_ : _039_;
  assign _044_ = pc[3] ? _043_ : _039_;
  assign _045_ = pc[4] ? _044_ : _042_;
  assign o[8] = _000_ & ~(_045_);
  assign _046_ = ~(pc[2] & pc[1]);
  assign _047_ = _046_ | _006_;
  assign _048_ = pc[4] & ~(_047_);
  assign o[9] = _000_ & ~(_048_);
  assign _049_ = _013_ | _006_;
  assign _050_ = _049_ | _001_;
  assign o[10] = _000_ & ~(_050_);
  assign o[3] = 1'h0;
endmodule

(* src = "pc.sv:1.1-5.10" *)
module pc(halt, pc, clk, rst);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  (* force_downto = 32'd1 *)
  (* src = "pc.sv:4.30-4.36|/opt/homebrew/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [5:0] _05_;
  (* force_downto = 32'd1 *)
  (* src = "pc.sv:4.30-4.36|/opt/homebrew/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [5:0] _06_;
  (* src = "pc.sv:1.50-1.53" *)
  input clk;
  wire clk;
  (* src = "pc.sv:1.17-1.21" *)
  input halt;
  wire halt;
  (* src = "pc.sv:1.41-1.43" *)
  output [5:0] pc;
  reg [5:0] pc;
  (* src = "pc.sv:1.54-1.57" *)
  input rst;
  wire rst;
  assign _05_[0] = ~pc[0];
  assign _06_[1] = pc[1] ^ pc[0];
  assign _00_ = ~(pc[1] & pc[0]);
  assign _06_[2] = ~(_00_ ^ pc[2]);
  assign _01_ = pc[2] & ~(_00_);
  assign _06_[3] = _01_ ^ pc[3];
  assign _02_ = ~(pc[3] & pc[2]);
  assign _03_ = _02_ | _00_;
  assign _06_[4] = ~(_03_ ^ pc[4]);
  assign _04_ = pc[4] & ~(_03_);
  assign _06_[5] = _04_ ^ pc[5];
  (* \always_ff  = 32'd1 *)
  (* src = "pc.sv:2.5-4.37" *)
  always @(posedge clk)
    if (rst) pc[0] <= 1'h0;
    else if (!halt) pc[0] <= _05_[0];
  (* \always_ff  = 32'd1 *)
  (* src = "pc.sv:2.5-4.37" *)
  always @(posedge clk)
    if (rst) pc[1] <= 1'h0;
    else if (!halt) pc[1] <= _06_[1];
  (* \always_ff  = 32'd1 *)
  (* src = "pc.sv:2.5-4.37" *)
  always @(posedge clk)
    if (rst) pc[2] <= 1'h0;
    else if (!halt) pc[2] <= _06_[2];
  (* \always_ff  = 32'd1 *)
  (* src = "pc.sv:2.5-4.37" *)
  always @(posedge clk)
    if (rst) pc[3] <= 1'h0;
    else if (!halt) pc[3] <= _06_[3];
  (* \always_ff  = 32'd1 *)
  (* src = "pc.sv:2.5-4.37" *)
  always @(posedge clk)
    if (rst) pc[4] <= 1'h0;
    else if (!halt) pc[4] <= _06_[4];
  (* \always_ff  = 32'd1 *)
  (* src = "pc.sv:2.5-4.37" *)
  always @(posedge clk)
    if (rst) pc[5] <= 1'h0;
    else if (!halt) pc[5] <= _06_[5];
  assign _05_[5:1] = pc[5:1];
  assign _06_[0] = _05_[0];
endmodule

(* src = "rega.sv:1.1-8.10" *)
module rega(arad, brad, a, b, we, wad, wd, clk, rst);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  (* src = "rega.sv:1.62-1.63" *)
  output [15:0] a;
  wire [15:0] a;
  (* src = "rega.sv:1.31-1.35" *)
  input [1:0] arad;
  wire [1:0] arad;
  (* src = "rega.sv:1.64-1.65" *)
  output [15:0] b;
  wire [15:0] b;
  (* src = "rega.sv:1.36-1.40" *)
  input [1:0] brad;
  wire [1:0] brad;
  (* src = "rega.sv:1.119-1.122" *)
  input clk;
  wire clk;
  reg [15:0] \regar[0] ;
  reg [15:0] \regar[1] ;
  reg [15:0] \regar[2] ;
  reg [15:0] \regar[3] ;
  (* src = "rega.sv:1.123-1.126" *)
  input rst;
  wire rst;
  (* src = "rega.sv:1.93-1.96" *)
  input [1:0] wad;
  wire [1:0] wad;
  (* src = "rega.sv:1.110-1.112" *)
  input [15:0] wd;
  wire [15:0] wd;
  (* src = "rega.sv:1.72-1.74" *)
  input we;
  wire we;
  assign _004_ = brad[0] ? \regar[1] [0] : \regar[0] [0];
  assign _005_ = brad[0] ? \regar[3] [0] : \regar[2] [0];
  assign b[0] = brad[1] ? _005_ : _004_;
  assign _006_ = brad[0] ? \regar[1] [1] : \regar[0] [1];
  assign _007_ = brad[0] ? \regar[3] [1] : \regar[2] [1];
  assign b[1] = brad[1] ? _007_ : _006_;
  assign _008_ = brad[0] ? \regar[1] [2] : \regar[0] [2];
  assign _009_ = brad[0] ? \regar[3] [2] : \regar[2] [2];
  assign b[2] = brad[1] ? _009_ : _008_;
  assign _010_ = brad[0] ? \regar[1] [3] : \regar[0] [3];
  assign _011_ = brad[0] ? \regar[3] [3] : \regar[2] [3];
  assign b[3] = brad[1] ? _011_ : _010_;
  assign _012_ = brad[0] ? \regar[1] [4] : \regar[0] [4];
  assign _013_ = brad[0] ? \regar[3] [4] : \regar[2] [4];
  assign b[4] = brad[1] ? _013_ : _012_;
  assign _014_ = brad[0] ? \regar[1] [5] : \regar[0] [5];
  assign _015_ = brad[0] ? \regar[3] [5] : \regar[2] [5];
  assign b[5] = brad[1] ? _015_ : _014_;
  assign _016_ = brad[0] ? \regar[1] [6] : \regar[0] [6];
  assign _017_ = brad[0] ? \regar[3] [6] : \regar[2] [6];
  assign b[6] = brad[1] ? _017_ : _016_;
  assign _018_ = brad[0] ? \regar[1] [7] : \regar[0] [7];
  assign _019_ = brad[0] ? \regar[3] [7] : \regar[2] [7];
  assign b[7] = brad[1] ? _019_ : _018_;
  assign _020_ = brad[0] ? \regar[1] [8] : \regar[0] [8];
  assign _021_ = brad[0] ? \regar[3] [8] : \regar[2] [8];
  assign b[8] = brad[1] ? _021_ : _020_;
  assign _022_ = brad[0] ? \regar[1] [9] : \regar[0] [9];
  assign _023_ = brad[0] ? \regar[3] [9] : \regar[2] [9];
  assign b[9] = brad[1] ? _023_ : _022_;
  assign _024_ = brad[0] ? \regar[1] [10] : \regar[0] [10];
  assign _025_ = brad[0] ? \regar[3] [10] : \regar[2] [10];
  assign b[10] = brad[1] ? _025_ : _024_;
  assign _026_ = brad[0] ? \regar[1] [11] : \regar[0] [11];
  assign _027_ = brad[0] ? \regar[3] [11] : \regar[2] [11];
  assign b[11] = brad[1] ? _027_ : _026_;
  assign _028_ = brad[0] ? \regar[1] [12] : \regar[0] [12];
  assign _029_ = brad[0] ? \regar[3] [12] : \regar[2] [12];
  assign b[12] = brad[1] ? _029_ : _028_;
  assign _030_ = brad[0] ? \regar[1] [13] : \regar[0] [13];
  assign _031_ = brad[0] ? \regar[3] [13] : \regar[2] [13];
  assign b[13] = brad[1] ? _031_ : _030_;
  assign _032_ = brad[0] ? \regar[1] [14] : \regar[0] [14];
  assign _033_ = brad[0] ? \regar[3] [14] : \regar[2] [14];
  assign b[14] = brad[1] ? _033_ : _032_;
  assign _034_ = brad[0] ? \regar[1] [15] : \regar[0] [15];
  assign _035_ = brad[0] ? \regar[3] [15] : \regar[2] [15];
  assign b[15] = brad[1] ? _035_ : _034_;
  assign _036_ = arad[0] ? \regar[1] [0] : \regar[0] [0];
  assign _037_ = arad[0] ? \regar[3] [0] : \regar[2] [0];
  assign a[0] = arad[1] ? _037_ : _036_;
  assign _038_ = arad[0] ? \regar[1] [1] : \regar[0] [1];
  assign _039_ = arad[0] ? \regar[3] [1] : \regar[2] [1];
  assign a[1] = arad[1] ? _039_ : _038_;
  assign _040_ = arad[0] ? \regar[1] [2] : \regar[0] [2];
  assign _041_ = arad[0] ? \regar[3] [2] : \regar[2] [2];
  assign a[2] = arad[1] ? _041_ : _040_;
  assign _042_ = arad[0] ? \regar[1] [3] : \regar[0] [3];
  assign _043_ = arad[0] ? \regar[3] [3] : \regar[2] [3];
  assign a[3] = arad[1] ? _043_ : _042_;
  assign _044_ = arad[0] ? \regar[1] [4] : \regar[0] [4];
  assign _045_ = arad[0] ? \regar[3] [4] : \regar[2] [4];
  assign a[4] = arad[1] ? _045_ : _044_;
  assign _046_ = arad[0] ? \regar[1] [5] : \regar[0] [5];
  assign _047_ = arad[0] ? \regar[3] [5] : \regar[2] [5];
  assign a[5] = arad[1] ? _047_ : _046_;
  assign _048_ = arad[0] ? \regar[1] [6] : \regar[0] [6];
  assign _049_ = arad[0] ? \regar[3] [6] : \regar[2] [6];
  assign a[6] = arad[1] ? _049_ : _048_;
  assign _050_ = arad[0] ? \regar[1] [7] : \regar[0] [7];
  assign _051_ = arad[0] ? \regar[3] [7] : \regar[2] [7];
  assign a[7] = arad[1] ? _051_ : _050_;
  assign _052_ = arad[0] ? \regar[1] [8] : \regar[0] [8];
  assign _053_ = arad[0] ? \regar[3] [8] : \regar[2] [8];
  assign a[8] = arad[1] ? _053_ : _052_;
  assign _054_ = arad[0] ? \regar[1] [9] : \regar[0] [9];
  assign _055_ = arad[0] ? \regar[3] [9] : \regar[2] [9];
  assign a[9] = arad[1] ? _055_ : _054_;
  assign _056_ = arad[0] ? \regar[1] [10] : \regar[0] [10];
  assign _057_ = arad[0] ? \regar[3] [10] : \regar[2] [10];
  assign a[10] = arad[1] ? _057_ : _056_;
  assign _058_ = arad[0] ? \regar[1] [11] : \regar[0] [11];
  assign _059_ = arad[0] ? \regar[3] [11] : \regar[2] [11];
  assign a[11] = arad[1] ? _059_ : _058_;
  assign _060_ = arad[0] ? \regar[1] [12] : \regar[0] [12];
  assign _061_ = arad[0] ? \regar[3] [12] : \regar[2] [12];
  assign a[12] = arad[1] ? _061_ : _060_;
  assign _062_ = arad[0] ? \regar[1] [13] : \regar[0] [13];
  assign _063_ = arad[0] ? \regar[3] [13] : \regar[2] [13];
  assign a[13] = arad[1] ? _063_ : _062_;
  assign _064_ = arad[0] ? \regar[1] [14] : \regar[0] [14];
  assign _065_ = arad[0] ? \regar[3] [14] : \regar[2] [14];
  assign a[14] = arad[1] ? _065_ : _064_;
  assign _066_ = arad[0] ? \regar[1] [15] : \regar[0] [15];
  assign _067_ = arad[0] ? \regar[3] [15] : \regar[2] [15];
  assign a[15] = arad[1] ? _067_ : _066_;
  assign _068_ = wad[1] | wad[0];
  assign _000_ = we & ~(_068_);
  assign _069_ = wad[1] | ~(wad[0]);
  assign _001_ = we & ~(_069_);
  assign _070_ = wad[0] | ~(wad[1]);
  assign _002_ = we & ~(_070_);
  assign _071_ = ~(wad[1] & wad[0]);
  assign _003_ = we & ~(_071_);
  always @(posedge clk)
    if (_000_) \regar[0] [0] <= wd[0];
  always @(posedge clk)
    if (_000_) \regar[0] [1] <= wd[1];
  always @(posedge clk)
    if (_000_) \regar[0] [2] <= wd[2];
  always @(posedge clk)
    if (_000_) \regar[0] [3] <= wd[3];
  always @(posedge clk)
    if (_000_) \regar[0] [4] <= wd[4];
  always @(posedge clk)
    if (_000_) \regar[0] [5] <= wd[5];
  always @(posedge clk)
    if (_000_) \regar[0] [6] <= wd[6];
  always @(posedge clk)
    if (_000_) \regar[0] [7] <= wd[7];
  always @(posedge clk)
    if (_000_) \regar[0] [8] <= wd[8];
  always @(posedge clk)
    if (_000_) \regar[0] [9] <= wd[9];
  always @(posedge clk)
    if (_000_) \regar[0] [10] <= wd[10];
  always @(posedge clk)
    if (_000_) \regar[0] [11] <= wd[11];
  always @(posedge clk)
    if (_000_) \regar[0] [12] <= wd[12];
  always @(posedge clk)
    if (_000_) \regar[0] [13] <= wd[13];
  always @(posedge clk)
    if (_000_) \regar[0] [14] <= wd[14];
  always @(posedge clk)
    if (_000_) \regar[0] [15] <= wd[15];
  always @(posedge clk)
    if (_001_) \regar[1] [0] <= wd[0];
  always @(posedge clk)
    if (_001_) \regar[1] [1] <= wd[1];
  always @(posedge clk)
    if (_001_) \regar[1] [2] <= wd[2];
  always @(posedge clk)
    if (_001_) \regar[1] [3] <= wd[3];
  always @(posedge clk)
    if (_001_) \regar[1] [4] <= wd[4];
  always @(posedge clk)
    if (_001_) \regar[1] [5] <= wd[5];
  always @(posedge clk)
    if (_001_) \regar[1] [6] <= wd[6];
  always @(posedge clk)
    if (_001_) \regar[1] [7] <= wd[7];
  always @(posedge clk)
    if (_001_) \regar[1] [8] <= wd[8];
  always @(posedge clk)
    if (_001_) \regar[1] [9] <= wd[9];
  always @(posedge clk)
    if (_001_) \regar[1] [10] <= wd[10];
  always @(posedge clk)
    if (_001_) \regar[1] [11] <= wd[11];
  always @(posedge clk)
    if (_001_) \regar[1] [12] <= wd[12];
  always @(posedge clk)
    if (_001_) \regar[1] [13] <= wd[13];
  always @(posedge clk)
    if (_001_) \regar[1] [14] <= wd[14];
  always @(posedge clk)
    if (_001_) \regar[1] [15] <= wd[15];
  always @(posedge clk)
    if (_002_) \regar[2] [0] <= wd[0];
  always @(posedge clk)
    if (_002_) \regar[2] [1] <= wd[1];
  always @(posedge clk)
    if (_002_) \regar[2] [2] <= wd[2];
  always @(posedge clk)
    if (_002_) \regar[2] [3] <= wd[3];
  always @(posedge clk)
    if (_002_) \regar[2] [4] <= wd[4];
  always @(posedge clk)
    if (_002_) \regar[2] [5] <= wd[5];
  always @(posedge clk)
    if (_002_) \regar[2] [6] <= wd[6];
  always @(posedge clk)
    if (_002_) \regar[2] [7] <= wd[7];
  always @(posedge clk)
    if (_002_) \regar[2] [8] <= wd[8];
  always @(posedge clk)
    if (_002_) \regar[2] [9] <= wd[9];
  always @(posedge clk)
    if (_002_) \regar[2] [10] <= wd[10];
  always @(posedge clk)
    if (_002_) \regar[2] [11] <= wd[11];
  always @(posedge clk)
    if (_002_) \regar[2] [12] <= wd[12];
  always @(posedge clk)
    if (_002_) \regar[2] [13] <= wd[13];
  always @(posedge clk)
    if (_002_) \regar[2] [14] <= wd[14];
  always @(posedge clk)
    if (_002_) \regar[2] [15] <= wd[15];
  always @(posedge clk)
    if (_003_) \regar[3] [0] <= wd[0];
  always @(posedge clk)
    if (_003_) \regar[3] [1] <= wd[1];
  always @(posedge clk)
    if (_003_) \regar[3] [2] <= wd[2];
  always @(posedge clk)
    if (_003_) \regar[3] [3] <= wd[3];
  always @(posedge clk)
    if (_003_) \regar[3] [4] <= wd[4];
  always @(posedge clk)
    if (_003_) \regar[3] [5] <= wd[5];
  always @(posedge clk)
    if (_003_) \regar[3] [6] <= wd[6];
  always @(posedge clk)
    if (_003_) \regar[3] [7] <= wd[7];
  always @(posedge clk)
    if (_003_) \regar[3] [8] <= wd[8];
  always @(posedge clk)
    if (_003_) \regar[3] [9] <= wd[9];
  always @(posedge clk)
    if (_003_) \regar[3] [10] <= wd[10];
  always @(posedge clk)
    if (_003_) \regar[3] [11] <= wd[11];
  always @(posedge clk)
    if (_003_) \regar[3] [12] <= wd[12];
  always @(posedge clk)
    if (_003_) \regar[3] [13] <= wd[13];
  always @(posedge clk)
    if (_003_) \regar[3] [14] <= wd[14];
  always @(posedge clk)
    if (_003_) \regar[3] [15] <= wd[15];
endmodule

(* top =  1  *)
(* src = "top.sv:1.1-13.10" *)
module top(we, wd, clk, rst);
  (* src = "top.sv:2.18-2.19" *)
  wire [15:0] a;
  (* src = "top.sv:3.17-3.21" *)
  wire [1:0] arad;
  (* src = "top.sv:2.20-2.21" *)
  wire [15:0] b;
  (* src = "top.sv:3.22-3.26" *)
  wire [1:0] brad;
  (* src = "top.sv:1.53-1.56" *)
  input clk;
  wire clk;
  (* src = "top.sv:10.11-10.12" *)
  wire h;
  (* src = "top.sv:6.18-6.19" *)
  wire [10:0] o;
  (* src = "top.sv:4.17-4.19" *)
  wire [2:0] op;
  (* src = "top.sv:5.17-5.20" *)
  wire [5:0] pca;
  (* src = "top.sv:1.58-1.61" *)
  input rst;
  wire rst;
  (* src = "top.sv:3.27-3.30" *)
  wire [1:0] wad;
  (* src = "top.sv:1.43-1.45" *)
  output [15:0] wd;
  wire [15:0] wd;
  (* src = "top.sv:1.19-1.21" *)
  output we;
  wire we;
  (* module_not_derived = 32'd1 *)
  (* src = "top.sv:9.9-9.23" *)
  alu alu (
    .a(a),
    .b(b),
    .op(op),
    .r(wd)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.sv:12.6-12.40" *)
  dec dec (
    .aradr(arad),
    .bradr(brad),
    .halt(h),
    .o(o),
    .op(op),
    .wadr(wad),
    .we(we)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.sv:11.10-11.21" *)
  imem imem (
    .o(o),
    .pc(pca)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.sv:10.8-10.25" *)
  pc pc (
    .clk(clk),
    .halt(h),
    .pc(pca),
    .rst(rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.sv:8.10-8.47" *)
  rega rega (
    .a(a),
    .arad(arad),
    .b(b),
    .brad(brad),
    .clk(clk),
    .rst(rst),
    .wad(wad),
    .wd(wd),
    .we(we)
  );
endmodule
